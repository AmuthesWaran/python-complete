Python
    - General purpose programming language
    - Open source
    - Easy to share code Packages
    - High Level programming language



Calculation

*   Multiply
+   Addition
-   Subtract
/   Division
**  Power
%   Modulo



Variables:
# snake_case
customer_id

Naming Convention:
x do not use spaces
    customer id
x do start with special characters or numbers
    2024_customer



Data Types:
* Integers
* Float
* Strings
* Boolean



Strings:

Single Quote
    'Hello'

Double Quote
    "Hello"

Multi-line Strings
    """Hello
    Everyone"""



Lists:
    - List are Zero index

Accessing Lists

first_element       - my_list[0]
last_element        - my_list[-1]
2nd and 3rd element - my_list[1:3]

Accessing Multiple Elements
# All elements from 4th index onwards
my_list[3:]

# Get first 3 elements
my_list[:3]

# Accessing every other Elements
my_list[::2]

# Access every other element, starting at the second
my_list[1::3]



Dictionaries:
    - key-value pairs

customer = {
    "name": "ammu",
    "age": 24
    "location": "chennai"
}

Accessing dictionaries by a given key:
customer["name"]

Accessing all keys of a dictionaries:
customer.keys()

Accessing all values of a dictionaries:
customer.values()



Sets:
* Contains unique data
* Unchangeable

my_set = {"value1", "value2"}

# Convert a list to a set
my_set = set(my_list)

# Sorting a set
sorted(my_set)



Tuples:
* Immutable
    - No adding values
    - No removing values
    - No changing values
* Ordered

my_tuple = ()

# Convert a list to a tuple
my_tuple = tuple(my_list)



Operators:
* Equality
    2 == 2
* Inequality
    3 != 2
* Less Than
    3 < 2
* Less Than or Equality
    3 < 2
* Greater Than
    3 < 2
* Greater Than or Equality
    3 < 2



Conditional Statements:
if
elif
else



For Loops:

for value in sequence:
    action

looping through dictionaries
for key in my_dict.keys():
    print(key)
for val in my_dict.values():
    print(val)
for key, val in my_dict.items():
    print(key, val)